public static BlockingQueue<Message> queue = new ArrayBlockingQueue<>(1000);

	Scheduler scheduler;

	  // Init
	  @Override protected void init() {
	    System.out.println( "---- init() ----" );
	    JobDetail job = JobBuilder.newJob(Qjob.class)
				.withIdentity("dummyJobName", "group1").usingJobData("buffer", queue).build();
		Trigger trigger = TriggerBuilder
				.newTrigger()
				.withIdentity("dummyTriggerName", "group1")
				.withSchedule(
					SimpleScheduleBuilder.simpleSchedule()
						.withIntervalInSeconds(5).repeatForever())
				.build();
	 

		 
		 
		        //Creating BlockingQueue of size 10
//		        Producer producer = new Producer(queue);
//		        Consumer consumer = new Consumer(queue);
		        //starting producer to produce messages in queue
//		        new Thread(producer).start();
		        //starting consumer to consume messages from queue
//		        new Thread(consumer).start();
//		        System.out.println("Producer and Consumer has been started");
		        //produce messages
		        for(int i=0; i<100; i++){
			Message msg = new Message(""+i++);
		            try {
		                Thread.sleep(i);
		                queue.put(msg);
		                System.out.println("Produced "+msg.getMsg());
		            } catch (InterruptedException e) {
		                e.printStackTrace();
		            }
		        //adding exit message
//		        Message msg = new Message("exit");
		        try {
		            queue.put(msg);
		        } catch (InterruptedException e) {
		            e.printStackTrace();
		        }
		    
		 
		
		
		// schedule it
			try {
				scheduler = new StdSchedulerFactory().getScheduler();
				scheduler.start();
				scheduler.scheduleJob(job, trigger);

				} catch (SchedulerException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		        }	
	  }


	  // Shutdown
	  @Override protected void onDestroy() {
	    System.out.println( "---- onDestroy() ----" );
	    try {
	      scheduler.shutdown();
	    }
	    catch( SchedulerException ex ) {
	      ex.printStackTrace();
	    }
	  }

	  
	  
	  //                setResponsePage(Jobs.class);

                queue.add(new Message("Fil1.jpeg"));
                queue.add(new Message("Fil2.jpeg"));
                queue.add(new Message("Fil3.jpeg"));
                queue.add(new Message("Fil4.jpeg"));
                queue.add(new Message("Fil5.jpeg"));

                JobDataMap map = new JobDataMap();
                map.put("queue", Jobs.queue);

                // Grab the Scheduler instance from the Factory
                try {
                    Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();
                    // Init
                    System.out.println("---- init() ----");
//                  scheduler.checkExists(PrintJob.class);
                    JobDetail job = JobBuilder.newJob(PrintJob.class)
                            .withIdentity("PrinterJob", "group1").usingJobData(map).build();

                    Long interval = new Long(5);
                    Trigger trigger = TriggerBuilder
                            .newTrigger()
                            .withIdentity("listUsersTrigger", "group")
                    //        .withSchedule(
                     //               SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(interval.intValue())
                      //                      )
                            .build();

                    scheduler.start();
                    scheduler.scheduleJob(job, trigger);
//                    scheduler.shutdown(true);
                } catch (SchedulerException e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
          
            
            
            
            
            
	  